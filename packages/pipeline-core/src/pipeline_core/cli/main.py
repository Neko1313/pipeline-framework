"""
Command Line Interface –¥–ª—è pipeline framework

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è pipeline
- –í–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
- –†–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
- Temporal –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import sys
import asyncio
from pathlib import Path
from typing import Optional, List, Dict, Any

import typer
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.tree import Tree
from rich.syntax import Syntax
import yaml

from pipeline_core.config.yaml_loader import load_pipeline_config, validate_config_file
from pipeline_core.config.models import RuntimeConfig
from pipeline_core.pipeline.executor import PipelineBuilder
from pipeline_core.registry.component_registry import ComponentRegistry
from pipeline_core.temporal.client import TemporalClient, create_temporal_client
from pipeline_core.observability import (
    setup_logging,
    configure_for_development,
    start_metrics_server,
)

app = typer.Typer(
    name="pipeline",
    help="Pipeline Framework CLI - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ data workflows",
    add_completion=False,
)

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã
config_app = typer.Typer(name="config", help="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
component_app = typer.Typer(name="component", help="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
temporal_app = typer.Typer(name="temporal", help="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Temporal")
metrics_app = typer.Typer(name="metrics", help="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏")

app.add_typer(config_app)
app.add_typer(component_app)
app.add_typer(temporal_app)
app.add_typer(metrics_app)

# Console –¥–ª—è rich output
console = Console()


# === –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===


@app.command()
def run(
    config_path: str = typer.Argument(..., help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ pipeline"),
    dry_run: bool = typer.Option(False, "--dry-run", help="–†–µ–∂–∏–º —Å—É—Ö–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"),
    environment: str = typer.Option(
        "development", "--env", help="–û–∫—Ä—É–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    ),
    resume_from: Optional[str] = typer.Option(
        None, "--resume-from", help="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å —ç—Ç–∞–ø–∞"
    ),
    skip_stages: Optional[List[str]] = typer.Option(
        None, "--skip", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø—ã"
    ),
    use_temporal: bool = typer.Option(
        False, "--temporal", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Temporal –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    ),
    temporal_server: str = typer.Option(
        "localhost:7233", "--temporal-server", help="–ê–¥—Ä–µ—Å Temporal —Å–µ—Ä–≤–µ—Ä–∞"
    ),
    log_level: str = typer.Option("INFO", "--log-level", help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"),
    output_format: str = typer.Option(
        "console", "--output", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (console/json)"
    ),
):
    """–ó–∞–ø—É—Å–∫ pipeline"""

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if environment == "development":
        configure_for_development()
    else:
        setup_logging()

    console.print(f"üöÄ –ó–∞–ø—É—Å–∫ pipeline: [bold]{config_path}[/bold]")

    try:
        # –°–æ–∑–¥–∞–µ–º runtime –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        runtime_config = RuntimeConfig(
            run_id=f"cli_{int(typer.get_current_context().resilient_parsing)}",
            dry_run=dry_run,
            resume_from_stage=resume_from,
            skip_stages=skip_stages or [],
            triggered_by="cli",
            environment_overrides={"ENVIRONMENT": environment},
        )

        if use_temporal:
            # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Temporal
            asyncio.run(
                _run_pipeline_temporal(config_path, runtime_config, temporal_server)
            )
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
            asyncio.run(_run_pipeline_local(config_path, runtime_config))

        console.print("‚úÖ Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", style="green")

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è pipeline: {e}", style="red")
        sys.exit(1)


async def _run_pipeline_local(config_path: str, runtime_config: RuntimeConfig):
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ pipeline"""

    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
        transient=True,
    ) as progress:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        task = progress.add_task("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", total=None)
        full_config = load_pipeline_config(config_path, runtime_config=runtime_config)
        progress.update(task, description="‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ pipeline
        progress.update(task, description="–°–æ–∑–¥–∞–Ω–∏–µ pipeline...")
        pipeline = PipelineBuilder.from_config(full_config.pipeline)

        progress.update(task, description="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ pipeline...")
        result = await pipeline.execute(runtime_config)

        progress.remove_task(task)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    _display_pipeline_result(result)


async def _run_pipeline_temporal(
    config_path: str, runtime_config: RuntimeConfig, server_address: str
):
    """–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Temporal"""

    from ..config.models import TemporalConfig

    temporal_config = TemporalConfig(enabled=True, server_address=server_address)

    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
        transient=True,
    ) as progress:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Temporal
        task = progress.add_task("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Temporal...", total=None)
        temporal_client = await create_temporal_client(temporal_config)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        progress.update(task, description="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        full_config = load_pipeline_config(config_path, runtime_config=runtime_config)

        # –ó–∞–ø—É—Å–∫ workflow
        progress.update(task, description="–ó–∞–ø—É—Å–∫ Temporal workflow...")
        workflow_handle = await temporal_client.execute_pipeline(
            full_config.pipeline, runtime_config
        )

        progress.update(
            task, description=f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è workflow {workflow_handle.id}..."
        )
        result = await temporal_client.wait_for_pipeline_completion(workflow_handle)

        progress.remove_task(task)

        await temporal_client.disconnect()

    console.print(f"‚úÖ Temporal workflow –∑–∞–≤–µ—Ä—à–µ–Ω: [bold]{workflow_handle.id}[/bold]")


def _display_pipeline_result(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è pipeline"""

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    status_color = "green" if result.is_success() else "red"
    status_icon = "‚úÖ" if result.is_success() else "‚ùå"

    console.print(
        Panel(
            f"{status_icon} Pipeline: [bold]{result.pipeline_id}[/bold]\n"
            f"Run ID: {result.run_id}\n"
            f"Status: [{status_color}]{result.status.value.upper()}[/{status_color}]\n"
            f"Duration: {result.metrics.duration_seconds:.2f}s\n"
            f"Stages: {result.metrics.completed_stages}/{result.metrics.total_stages}",
            title="Pipeline Result",
            border_style=status_color,
        )
    )

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–æ–≤
    if result.stage_results:
        table = Table(title="Stage Results")
        table.add_column("Stage", style="cyan")
        table.add_column("Status", style="magenta")
        table.add_column("Duration", style="green")
        table.add_column("Rows", style="blue")

        for stage_name, stage_result in result.stage_results.items():
            status_style = "green" if stage_result.is_success() else "red"
            duration = (
                f"{stage_result.metadata.duration_seconds:.2f}s"
                if stage_result.metadata.duration_seconds
                else "N/A"
            )
            rows = (
                str(stage_result.metadata.rows_processed)
                if stage_result.metadata.rows_processed
                else "N/A"
            )

            table.add_row(
                stage_name,
                f"[{status_style}]{stage_result.status.value}[/{status_style}]",
                duration,
                rows,
            )

        console.print(table)


# === –ö–æ–º–∞–Ω–¥—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===


@config_app.command("validate")
def validate_config(
    config_path: str = typer.Argument(..., help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ pipeline"),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"),
):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ pipeline"""

    console.print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: [bold]{config_path}[/bold]")

    try:
        errors = validate_config_file(config_path)

        if not errors:
            console.print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞", style="green")

            if verbose:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                full_config = load_pipeline_config(config_path)
                _display_config_details(full_config.pipeline)
        else:
            console.print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", style="red")
            for error in errors:
                console.print(f"  ‚Ä¢ {error}", style="red")
            sys.exit(1)

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}", style="red")
        sys.exit(1)


@config_app.command("show")
def show_config(
    config_path: str = typer.Argument(..., help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ pipeline"),
    format: str = typer.Option("yaml", "--format", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (yaml/json)"),
):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ pipeline"""

    try:
        full_config = load_pipeline_config(config_path)
        config_dict = full_config.pipeline.dict()

        if format == "yaml":
            syntax = Syntax(yaml.dump(config_dict, default_flow_style=False), "yaml")
            console.print(syntax)
        elif format == "json":
            import json

            syntax = Syntax(json.dumps(config_dict, indent=2), "json")
            console.print(syntax)
        else:
            console.print(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'yaml' –∏–ª–∏ 'json'", style="red"
            )
            sys.exit(1)

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", style="red")
        sys.exit(1)


def _display_config_details(pipeline_config):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.print(
        Panel(
            f"Name: [bold]{pipeline_config.name}[/bold]\n"
            f"Version: {pipeline_config.version}\n"
            f"Environment: {pipeline_config.metadata.environment.value}\n"
            f"Owner: {pipeline_config.metadata.owner or 'N/A'}\n"
            f"Description: {pipeline_config.metadata.description or 'N/A'}",
            title="Pipeline Information",
        )
    )

    # –î–µ—Ä–µ–≤–æ —ç—Ç–∞–ø–æ–≤
    if pipeline_config.stages:
        tree = Tree("üîÑ Pipeline Stages")

        for stage in pipeline_config.stages:
            stage_node = tree.add(f"[cyan]{stage.name}[/cyan] ({stage.component})")

            if stage.depends_on:
                deps_node = stage_node.add("üìã Dependencies")
                for dep in stage.depends_on:
                    deps_node.add(f"[yellow]{dep}[/yellow]")

            if stage.retry_policy.maximum_attempts > 1:
                stage_node.add(
                    f"üîÑ Retry: {stage.retry_policy.maximum_attempts} attempts"
                )

            if stage.timeout_seconds != 3600:
                stage_node.add(f"‚è±Ô∏è Timeout: {stage.timeout_seconds}s")

        console.print(tree)


# === –ö–æ–º–∞–Ω–¥—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ===


@component_app.command("list")
def list_components(
    component_type: Optional[str] = typer.Option(
        None, "--type", help="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"
    ),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"),
):
    """–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    registry = ComponentRegistry()
    components = registry.list_components(component_type)

    if not components:
        console.print("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", style="yellow")
        return

    table = Table(title=f"Registered Components ({len(components)})")
    table.add_column("Type", style="cyan")
    table.add_column("Name", style="magenta")
    table.add_column("Version", style="green")
    table.add_column("Source", style="blue")

    if verbose:
        table.add_column("Description", style="white")
        table.add_column("Module", style="dim")

    for component in components:
        row = [
            component.component_type.value,
            component.name,
            component.version,
            component.source.value,
        ]

        if verbose:
            row.extend(
                [
                    component.description[:50] + "..."
                    if len(component.description) > 50
                    else component.description,
                    component.module_path,
                ]
            )

        table.add_row(*row)

    console.print(table)


@component_app.command("info")
def component_info(
    component_type: str = typer.Argument(..., help="–¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"),
    component_name: str = typer.Argument(..., help="–ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"),
):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ"""

    registry = ComponentRegistry()
    component_info = registry.get_component_info(component_type, component_name)

    if not component_info:
        console.print(
            f"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_type}/{component_name} –Ω–µ –Ω–∞–π–¥–µ–Ω", style="red"
        )
        sys.exit(1)

    console.print(
        Panel(
            f"Type: [cyan]{component_info.component_type.value}[/cyan]\n"
            f"Name: [bold]{component_info.name}[/bold]\n"
            f"Version: [green]{component_info.version}[/green]\n"
            f"Source: [blue]{component_info.source.value}[/blue]\n"
            f"Module: [dim]{component_info.module_path}[/dim]\n\n"
            f"Description:\n{component_info.description}",
            title=f"Component: {component_type}/{component_name}",
        )
    )

    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if component_info.dependencies:
        deps_text = Text("Dependencies:\n")
        for dep in component_info.dependencies:
            deps_text.append(f"  ‚Ä¢ {dep}\n", style="yellow")
        console.print(deps_text)


@component_app.command("validate")
def validate_components():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    registry = ComponentRegistry()

    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:
        task = progress.add_task("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...", total=None)
        validation_results = registry.validate_all_components()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    valid_count = len(validation_results["valid"])
    invalid_count = len(validation_results["invalid"])

    console.print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {valid_count}", style="green")

    if invalid_count > 0:
        console.print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {invalid_count}", style="red")
        for invalid in validation_results["invalid"]:
            console.print(f"  ‚Ä¢ {invalid}", style="red")
        sys.exit(1)


# === –ö–æ–º–∞–Ω–¥—ã Temporal ===


@temporal_app.command("worker")
def start_temporal_worker(
    server: str = typer.Option(
        "localhost:7233", "--server", help="–ê–¥—Ä–µ—Å Temporal —Å–µ—Ä–≤–µ—Ä–∞"
    ),
    namespace: str = typer.Option("default", "--namespace", help="Temporal namespace"),
    task_queue: str = typer.Option("pipeline-tasks", "--task-queue", help="Task queue"),
    max_activities: int = typer.Option(
        100, "--max-activities", help="–ú–∞–∫—Å–∏–º—É–º concurrent activities"
    ),
    max_workflows: int = typer.Option(
        100, "--max-workflows", help="–ú–∞–∫—Å–∏–º—É–º concurrent workflows"
    ),
):
    """–ó–∞–ø—É—Å–∫ Temporal Worker"""

    console.print(f"üîÑ –ó–∞–ø—É—Å–∫ Temporal Worker...")
    console.print(f"Server: [bold]{server}[/bold]")
    console.print(f"Namespace: [bold]{namespace}[/bold]")
    console.print(f"Task Queue: [bold]{task_queue}[/bold]")

    from ..config.models import TemporalConfig

    temporal_config = TemporalConfig(
        enabled=True, server_address=server, namespace=namespace, task_queue=task_queue
    )

    async def run_worker():
        temporal_client = await create_temporal_client(temporal_config)
        worker = await temporal_client.start_worker(
            task_queue=task_queue,
            max_concurrent_activities=max_activities,
            max_concurrent_workflows=max_workflows,
        )

        console.print("‚úÖ Temporal Worker –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

        try:
            # –î–µ—Ä–∂–∏–º worker —Ä–∞–±–æ—Ç–∞—é—â–∏–º
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            console.print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Temporal Worker...")
            await temporal_client.stop_all_workers()
            await temporal_client.disconnect()

    try:
        asyncio.run(run_worker())
    except KeyboardInterrupt:
        console.print("‚úÖ Temporal Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


@temporal_app.command("status")
def temporal_status(
    workflow_id: str = typer.Argument(..., help="ID Workflow"),
    server: str = typer.Option(
        "localhost:7233", "--server", help="–ê–¥—Ä–µ—Å Temporal —Å–µ—Ä–≤–µ—Ä–∞"
    ),
    namespace: str = typer.Option("default", "--namespace", help="Temporal namespace"),
):
    """–°—Ç–∞—Ç—É—Å Temporal Workflow"""

    from ..config.models import TemporalConfig

    temporal_config = TemporalConfig(
        enabled=True, server_address=server, namespace=namespace
    )

    async def get_status():
        temporal_client = await create_temporal_client(temporal_config)
        status = await temporal_client.get_workflow_status(workflow_id)
        await temporal_client.disconnect()
        return status

    try:
        status = asyncio.run(get_status())

        console.print(
            Panel(
                f"Workflow ID: [bold]{status['workflow_id']}[/bold]\n"
                f"Run ID: {status['run_id']}\n"
                f"Status: [cyan]{status['status']}[/cyan]\n"
                f"Start Time: {status['start_time'] or 'N/A'}\n"
                f"Close Time: {status['close_time'] or 'N/A'}\n"
                f"Execution Time: {status['execution_time'] or 'N/A'}s\n"
                f"Task Queue: {status['task_queue']}",
                title="Temporal Workflow Status",
            )
        )

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}", style="red")
        sys.exit(1)


# === –ö–æ–º–∞–Ω–¥—ã –º–µ—Ç—Ä–∏–∫ ===


@metrics_app.command("server")
def start_metrics_server_cmd(
    port: int = typer.Option(8000, "--port", help="–ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫"),
    host: str = typer.Option("0.0.0.0", "--host", help="–•–æ—Å—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫"),
):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""

    console.print(f"üìä –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –Ω–∞ [bold]{host}:{port}[/bold]")

    try:
        server = start_metrics_server(port, host)
        console.print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω: http://{host}:{port}/metrics")
        console.print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞—é—â–∏–º
        try:
            while True:
                import time

                time.sleep(1)
        except KeyboardInterrupt:
            console.print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫...")
            server.stop()
            console.print("‚úÖ –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}", style="red")
        sys.exit(1)


@metrics_app.command("export")
def export_metrics():
    """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫"""

    from ..observability.metrics import get_default_metrics_collector

    collector = get_default_metrics_collector()
    metrics_data = collector.export_metrics()

    console.print("üìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
    console.print(metrics_data)


# === –£—Ç–∏–ª–∏—Ç—ã ===


@app.command()
def init(
    name: str = typer.Argument(..., help="–ò–º—è –Ω–æ–≤–æ–≥–æ pipeline"),
    template: str = typer.Option(
        "basic", "--template", help="–®–∞–±–ª–æ–Ω pipeline (basic/sql/etl)"
    ),
    output_dir: str = typer.Option(
        ".", "--output", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
    ),
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ pipeline –ø—Ä–æ–µ–∫—Ç–∞"""

    console.print(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ pipeline: [bold]{name}[/bold]")

    project_dir = Path(output_dir) / name
    project_dir.mkdir(exist_ok=True)

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    (project_dir / "config").mkdir(exist_ok=True)
    (project_dir / "components").mkdir(exist_ok=True)
    (project_dir / "scripts").mkdir(exist_ok=True)

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    basic_config = {
        "pipeline": {
            "name": name,
            "version": "1.0.0",
            "metadata": {
                "description": f"Pipeline {name}",
                "owner": "data-team@company.com",
                "environment": "development",
            },
            "stages": [
                {
                    "name": "extract-data",
                    "component": "extractor/sql",
                    "config": {
                        "connection_string": "${DATABASE_URL}",
                        "query": "SELECT * FROM source_table",
                    },
                },
                {
                    "name": "transform-data",
                    "component": "transformer/polars",
                    "depends_on": ["extract-data"],
                    "config": {
                        "operations": [
                            {"type": "filter", "condition": "column IS NOT NULL"}
                        ]
                    },
                },
                {
                    "name": "load-data",
                    "component": "loader/sql",
                    "depends_on": ["transform-data"],
                    "config": {
                        "connection_string": "${WAREHOUSE_URL}",
                        "table": "target_table",
                        "write_mode": "append",
                    },
                },
            ],
        }
    }

    config_file = project_dir / "config" / "pipeline.yaml"
    with open(config_file, "w") as f:
        yaml.dump(basic_config, f, default_flow_style=False)

    # –°–æ–∑–¥–∞–µ–º README
    readme_content = f"""# {name} Pipeline

## –û–ø–∏—Å–∞–Ω–∏–µ
Pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö {name}.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞
- `config/pipeline.yaml` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pipeline
- `components/` - –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- `scripts/` - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã

## –ó–∞–ø—É—Å–∫
```bash
pipeline run config/pipeline.yaml
```

## –í–∞–ª–∏–¥–∞—Ü–∏—è
```bash
pipeline config validate config/pipeline.yaml
```
"""

    readme_file = project_dir / "README.md"
    with open(readme_file, "w") as f:
        f.write(readme_content)

    console.print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤: [bold]{project_dir}[/bold]")
    console.print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    console.print(f"  üìÑ {config_file}")
    console.print(f"  üìÑ {readme_file}")
    console.print(f"  üìÅ {project_dir / 'components'}")
    console.print(f"  üìÅ {project_dir / 'scripts'}")


@app.command()
def version():
    """–í–µ—Ä—Å–∏—è pipeline framework"""
    console.print("Pipeline Framework v0.1.0")


def main():
    """Entry point –¥–ª—è CLI"""
    app()


if __name__ == "__main__":
    main()
