# packages/pipeline-core/pyproject.toml

[project]
name = "pipeline-core"
version = "0.1.0"
description = "Core framework for data workflow orchestration with Temporal integration"
readme = "README.md"
authors = [
    { name = "Ryibalchenko.NV", email = "Ryibalchenko.NV@dns-shop.ru" }
]
requires-python = ">=3.13"
dependencies = [
    # Core dependencies
    "pydantic>=2.5.0",
    "pyyaml>=6.0",
    "typing-extensions>=4.8.0",
    
    # Temporal integration
    "temporalio>=1.5.0",
    
    # Async and concurrency
    "asyncio-mqtt>=0.16.0",
    
    # Configuration and validation
    "python-dotenv>=1.0.0",
    
    # Logging and observability
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    
    # CLI and rich output
    "typer>=0.9.0",
    "rich>=13.7.0",
    
    # SQL support (for SQL components)
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    "aiomysql>=0.2.0",  # MySQL async driver
    
    # Data processing
    "pandas>=2.1.0",
    "polars>=0.20.0",
    
    # Utilities
    "click>=8.1.0",
    "httpx>=0.25.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.0",
    "ruff>=0.8.0",
    "pyright>=1.1.350",
    "pre-commit>=3.6.0"
]

test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "aioresponses>=0.7.0"
]

monitoring = [
    "prometheus-client>=0.19.0",
    "grafana-client>=3.4.0"
]

[project.entry-points."pipeline_framework.components"]
# Entry points для автоматического обнаружения компонентов
base = "pipeline_core.components.base"

[project.entry-points."pipeline_framework.core"]
registry = "pipeline_core.registry:ComponentRegistry"
pipeline = "pipeline_core.pipeline:Pipeline"
temporal_client = "pipeline_core.temporal:TemporalClient"

[project.scripts]
pipeline-core = "pipeline_core.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/pipeline_core"]

[tool.ruff]
line-length = 88
target-version = "py313"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]
ignore = ["E501", "S101", "S603", "S607"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "PLR2004", "S105", "S106"]
"src/pipeline_core/cli/*.py" = ["S602", "S603"]

[tool.ruff.lint.isort]
known-first-party = ["pipeline_core"]

[tool.pyright]
typeCheckingMode = "strict"
pythonVersion = "3.13"
include = ["src", "tests"]
exclude = ["build", "dist"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=pipeline_core",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80"
]

[tool.coverage.run]
source = ["src/pipeline_core"]
omit = ["tests/*", "src/pipeline_core/cli/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
