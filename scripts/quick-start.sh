#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è pipeline-core

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç pipeline-core${NC}"
echo

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ uv
if ! command -v uv &> /dev/null; then
    echo -e "${RED}‚ùå uv –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
    curl -LsSf https://astral.sh/uv/install.sh | sh
    export PATH="$HOME/.cargo/bin:$PATH"
    echo -e "${GREEN}‚úÖ uv —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
else
    echo -e "${GREEN}‚úÖ uv –Ω–∞–π–¥–µ–Ω: $(uv --version)${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
echo -e "${BLUE}üêç –ü—Ä–æ–≤–µ—Ä—è–µ–º Python...${NC}"
if ! uv python list | grep -q "3.11\|3.12"; then
    echo -e "${YELLOW}‚ö†Ô∏è  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python 3.11...${NC}"
    uv python install 3.11
fi

echo -e "${GREEN}‚úÖ Python –≥–æ—Ç–æ–≤${NC}"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...${NC}"
uv sync --dev

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pre-commit
echo -e "${BLUE}üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pre-commit —Ö—É–∫–∏...${NC}"
uv run pre-commit install

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
echo -e "${BLUE}üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...${NC}"
uv run pytest tests/ -v

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞...${NC}"
uv run ruff check src tests
uv run ruff format --check src tests
uv run pyright

echo
echo -e "${GREEN}üéâ –ì–æ—Ç–æ–≤–æ! pipeline-core –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é${NC}"
echo
echo -e "${BLUE}–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo -e "  ${YELLOW}make help${NC}           - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
echo -e "  ${YELLOW}make test${NC}           - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
echo -e "  ${YELLOW}make test-watch${NC}     - —Ç–µ—Å—Ç—ã –≤ —Ä–µ–∂–∏–º–µ watch"
echo -e "  ${YELLOW}make lint${NC}           - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥"
echo -e "  ${YELLOW}make format${NC}         - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
echo -e "  ${YELLOW}make type-check${NC}     - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã"
echo -e "  ${YELLOW}make check-all${NC}      - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
echo
echo -e "${BLUE}–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:${NC}"
echo -e "  1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –≤ ${YELLOW}src/pipeline_core/components/${NC}"
echo -e "  2. –ù–∞—Å–ª–µ–¥—É–π—Ç–µ—Å—å –æ—Ç ${YELLOW}BaseComponent${NC}"
echo -e "  3. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Å –ø–æ–º–æ—â—å—é ${YELLOW}@register_component${NC}"
echo -e "  4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ${YELLOW}make test${NC} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
echo

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
EXAMPLE_FILE="examples/my_first_component.py"
if [ ! -f "$EXAMPLE_FILE" ]; then
    echo -e "${BLUE}üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...${NC}"
    mkdir -p examples

    cat > "$EXAMPLE_FILE" << 'EOF'
"""
–ú–æ–π –ø–µ—Ä–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è pipeline-core
"""
from typing import Type
from pydantic import Field

from pipeline_core import (
    BaseComponent,
    ComponentConfig,
    ExecutionContext,
    ExecutionResult,
    ExecutionStatus,
    register_component
)


class MyFirstConfig(ComponentConfig):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    type: str = Field(default="my-first-component", const=True)
    greeting: str = Field(default="Hello", description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
    name: str = Field(..., description="–ò–º—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")


@register_component("my-first-component")
class MyFirstComponent(BaseComponent):
    """–ú–æ–π –ø–µ—Ä–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def get_config_model(self) -> Type[ComponentConfig]:
        return MyFirstConfig

    def execute(self, context: ExecutionContext) -> ExecutionResult:
        config: MyFirstConfig = self.config

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        message = f"{config.greeting}, {config.name}!"

        self.logger.info(f"–°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {message}")

        return ExecutionResult(
            status=ExecutionStatus.SUCCESS,
            data=message,
            processed_records=1,
            metadata={"greeting": config.greeting, "name": config.name}
        )


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    from pipeline_core import ExecutionContext

    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    component = MyFirstComponent({
        "type": "my-first-component",
        "greeting": "–ü—Ä–∏–≤–µ—Ç",
        "name": "–ú–∏—Ä"
    })

    # –í—ã–ø–æ–ª–Ω—è–µ–º
    context = ExecutionContext()
    result = component.execute(context)

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.data}")
    print(f"–°—Ç–∞—Ç—É—Å: {result.status}")
    print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result.metadata}")
EOF

    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä: ${EXAMPLE_FILE}${NC}"
    echo -e "${BLUE}–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ${YELLOW}uv run python examples/my_first_component.py${NC}"
fi

echo -e "${GREEN}üéä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ pipeline-core!${NC}"